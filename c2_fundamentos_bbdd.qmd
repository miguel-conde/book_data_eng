# Fundamentos de Bases de Datos para Data Scientists

## **Introducci√≥n a Bases de Datos Relacionales vs NoSQL**

Las bases de datos son la **columna vertebral** de cualquier sistema de datos. En este cap√≠tulo, aprenderemos los conceptos clave de bases de datos relacionales, SQL y t√©cnicas de optimizaci√≥n. Adem√°s, exploraremos **formatos eficientes de almacenamiento**, introduciremos **Data Lakes con MinIO** y veremos **una comparaci√≥n te√≥rica entre Data Warehouses y PostgreSQL**.

Las bases de datos se dividen en dos grandes categor√≠as:

### **Bases de datos relacionales (SQL)**

-   Almacenan datos en **tablas con filas y columnas**.

-   Soportan **lenguaje SQL** para realizar consultas estructuradas.

-   **Ejemplos:** PostgreSQL, MySQL, MariaDB, SQL Server.

-   **Casos de uso:**

    -   Sistemas transaccionales (ventas, facturaci√≥n, clientes).

    -   An√°lisis de datos estructurados.

### **Bases de datos NoSQL**

-   No siguen un esquema r√≠gido de tablas y pueden almacenar datos en varios formatos:

    -   **Documentos:** MongoDB (JSON-like).

    -   **Claves-valor:** Redis.

    -   **Columnas:** Apache Cassandra.

    -   **Grafos:** Neo4j.

-   **Casos de uso:**

    -   Aplicaciones en tiempo real con alta escalabilidad.

    -   Almacenamiento flexible de datos no estructurados.

üí° **Ejemplo:**\
Un e-commerce puede usar **PostgreSQL** para almacenar pedidos y clientes (estructurado) y **MongoDB** para guardar datos de navegaci√≥n del usuario (no estructurado).

## **Fundamentos de SQL (PostgreSQL)**

PostgreSQL es un **motor de base de datos relacional open-source** con caracter√≠sticas avanzadas, como indexaci√≥n eficiente y soporte para JSON.

### **Conceptos clave de SQL:**

-   **SELECT:** para consultar datos.

-   **JOINs:** combinaciones de datos de varias tablas.

-   **GROUP BY & HAVING:** agregaciones sobre conjuntos de datos.

-   **√çndices:** optimizaci√≥n de b√∫squeda de datos.

-   **Vistas y Materialized Views:** consultas reutilizables.

üí° **Ejemplo de consulta en PostgreSQL:**

```sql
SELECT customer_name, SUM(amount) AS total_spent 
FROM orders 
GROUP BY customer_name 
HAVING SUM(amount) > 500;
```

üìå **Explicaci√≥n:** Agrupa los pedidos por cliente y devuelve aquellos con un gasto total superior a 500.

## **Dise√±o de Esquemas de Bases de Datos**

El dise√±o de esquemas afecta la **eficiencia y escalabilidad** de una base de datos.

### **Normalizaci√≥n vs Denormalizaci√≥n**

-   **Normalizaci√≥n:**

    -   Minimiza redundancia y mejora consistencia.

    -   Divide datos en m√∫ltiples tablas con relaciones.

    -   **Ejemplo:** Separar clientes, pedidos y productos en tablas distintas.

-   **Denormalizaci√≥n:**

    -   Reduce la cantidad de `JOINs` en consultas frecuentes.

    -   Aumenta redundancia pero mejora performance en ciertos casos.

üí° **Ejemplo de esquema normalizado:**

```sql
CREATE TABLE customers (
    id SERIAL PRIMARY KEY,     
    name TEXT,     
    email TEXT UNIQUE 
);  

CREATE TABLE orders (
    id SERIAL PRIMARY KEY, 
    customer_id INT REFERENCES customers(id),
    amount DECIMAL,
    order_date TIMESTAMP 
);
```

üìå **Explicaci√≥n:** En lugar de almacenar informaci√≥n repetida del cliente en cada pedido, creamos una relaci√≥n con `customer_id`.

## **Indexaci√≥n y Optimizaci√≥n de Consultas**

Las bases de datos pueden volverse **lentas** a medida que crecen. Para evitar esto, se usan **√≠ndices y optimizaci√≥n de consultas**.

### **Tipos de √≠ndices en PostgreSQL**

1.  **√çndices B-Tree (Por defecto)** ‚Üí √ötiles para `WHERE` en valores √∫nicos o rango.

2.  **√çndices Hash** ‚Üí Para b√∫squedas exactas.

3.  **√çndices GIN** ‚Üí Para b√∫squedas en JSON o texto completo.

4.  **√çndices BRIN** ‚Üí Optimizaci√≥n en grandes vol√∫menes de datos ordenados.

üí° **Ejemplo de creaci√≥n de √≠ndice:**


```sql
CREATE INDEX idx_customer_email ON customers(email);`
```

üìå **Explicaci√≥n:** Agrega un √≠ndice sobre el email del cliente para acelerar b√∫squedas.

üîç **Uso de `EXPLAIN ANALYZE` para analizar rendimiento:**

```sql
EXPLAIN ANALYZE  SELECT * FROM orders WHERE amount > 100;
```

üìå **Explicaci√≥n:** Muestra el plan de ejecuci√≥n de la consulta y su costo en t√©rminos de tiempo y recursos.

## **Almacenamiento Eficiente de Datos en Formatos Parquet y Avro**

### **Por qu√© no siempre usar CSV o JSON**

-   **CSV:** ocupa mucho espacio y es lento para grandes vol√∫menes.

-   **JSON:** flexible pero pesado y dif√≠cil de optimizar.

### **Formatos optimizados**

1.  **Parquet:**

    -   Formato columnar (excelente para consultas anal√≠ticas).

    -   Soporta compresi√≥n eficiente.

    -   Se usa en Apache Spark, Snowflake, AWS Athena.

2.  **Avro:**

    -   Formato binario, ideal para transmisi√≥n de datos.

    -   √ötil en Kafka y streaming de eventos.

üí° **Ejemplo de conversi√≥n en Pandas:**


``` python
import pandas as pd  

df = pd.read_csv("data.csv") 
df.to_parquet("data.parquet", engine="pyarrow", compression="snappy")
```

üìå **Explicaci√≥n:** Convierte un CSV en un Parquet optimizado con compresi√≥n **Snappy**.

## **Data Lakes en Local con MinIO (Conceptual y Opcional Pr√°ctico)**

### **¬øQu√© es un Data Lake?**

Un **Data Lake** es un repositorio que almacena datos en **crudo** en m√∫ltiples formatos.

**Diferencias entre Data Warehouse y Data Lake:**

| **Caracter√≠stica** | **Data Warehouse** | **Data Lake** |
|------------------------|------------------------|------------------------|
| Datos | Estructurados | Cualquier formato (JSON, Parquet, im√°genes, logs) |
| Procesamiento | SQL, optimizado para consultas | Flexible, permite ML, Big Data |
| Ejemplo | Snowflake, Redshift | AWS S3, MinIO |

### **MinIO: Un Data Lake en Local**

MinIO es un sistema de almacenamiento **compatible con S3**, pero ejecutable en local.

üí° **Ejemplo:**\
Usar MinIO para almacenar archivos Parquet en un Data Lake local y procesarlos con Spark o Dask.

## **Introducci√≥n Te√≥rica a Data Warehouses (Snowflake, Redshift, BigQuery) y Comparaci√≥n con PostgreSQL**

üìå **Diferencias Clave**

| **Aspecto**   | **PostgreSQL (en local)** | **Snowflake (Cloud DW)**     |
|---------------|---------------------------|------------------------------|
| Escalabilidad | Limitada                  | Alta (autoescalado)          |
| Coste         | Gratis en local           | Pago por uso                 |
| Rendimiento   | Bueno en datos peque√±os   | Optimizado para TBs de datos |
| Formato       | SQL tradicional           | SQL optimizado para DW       |

üí° **Ejemplo pr√°ctico:**\
Si una empresa tiene **10 GB de datos**, PostgreSQL es suficiente. Pero si tiene **10 TB y consultas anal√≠ticas pesadas**, necesita un **Data Warehouse como Snowflake**.

## **Conclusi√≥n del Cap√≠tulo**

‚úîÔ∏è PostgreSQL es una base de datos **potente y escalable en local**.\
‚úîÔ∏è Formatos como **Parquet y Avro** mejoran el almacenamiento.\
‚úîÔ∏è **Data Lakes (MinIO)** son √∫tiles para almacenar datos en bruto.\
‚úîÔ∏è **Data Warehouses como Snowflake** son ideales para consultas anal√≠ticas en grandes vol√∫menes.