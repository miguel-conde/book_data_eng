# **Contenedores y Orquestación - Docker y Kubernetes** 🚀

En este capítulo aprenderemos cómo **Docker y Kubernetes** facilitan la gestión de aplicaciones en entornos reproducibles. Veremos cómo crear contenedores con **Docker**, gestionar múltiples servicios con **Docker Compose**, y una introducción a **Kubernetes** usando Minikube en local.

## **1. Introducción a Docker: ¿Por qué usar contenedores?**

Docker permite ejecutar aplicaciones en **contenedores**, que son entornos aislados con sus propias dependencias.

### **Ventajas de Docker:**

✅ Asegura **reproducibilidad** en diferentes entornos (desarrollo, producción).\
✅ Permite **aislar aplicaciones** sin conflictos de dependencias.\
✅ Facilita el **despliegue rápido** de aplicaciones.

📌 **Ejemplo práctico:**\
Un Data Engineer necesita PostgreSQL, MinIO y Airflow en su máquina.

-   Sin Docker: instala manualmente cada herramienta (riesgo de incompatibilidades).

-   Con Docker: usa contenedores preconfigurados sin tocar el sistema operativo.

## **2. Instalación de Docker en Linux**

Ejecuta los siguientes comandos en tu terminal:

```         
bash
```

Copiar

`sudo apt update sudo apt install docker.io -y`

Verifica que Docker está instalado:

```         
bash
```

Copiar

`docker --version`

Inicia el servicio:

```         
bash
```

Copiar

`sudo systemctl enable --now docker`

Permite ejecutar Docker sin `sudo`:

```         
bash
```

Copiar

`sudo usermod -aG docker $USER newgrp docker`

## **3. Creación y Gestión de Contenedores**

### **📌 Descargar y Ejecutar una Imagen en Docker**

Ejecuta un contenedor de **PostgreSQL**:

```         
bash
```

Copiar

`docker run --name postgres -e POSTGRES_PASSWORD=admin -p 5432:5432 -d postgres`

📌 **Explicación:**

-   `--name postgres`: asigna un nombre al contenedor.

-   `-e POSTGRES_PASSWORD=admin`: establece una contraseña.

-   `-p 5432:5432`: expone el puerto 5432 al sistema.

-   `-d`: ejecuta el contenedor en segundo plano.

### **📌 Listar contenedores en ejecución**

```         
bash
```

Copiar

`docker ps`

### **📌 Ver logs de un contenedor**

```         
bash
```

Copiar

`docker logs postgres`

### **📌 Acceder a un contenedor en ejecución**

```         
bash
```

Copiar

`docker exec -it postgres bash`

### **📌 Detener y eliminar un contenedor**

```         
bash
```

Copiar

`docker stop postgres docker rm postgres`

## **4. Docker Compose: Gestión de Múltiples Servicios**

Docker Compose permite gestionar múltiples contenedores con un solo archivo **`docker-compose.yml`**.

### **📌 Crear un `docker-compose.yml` con PostgreSQL y Adminer**

Crea un archivo `docker-compose.yml`:

```         
yaml
```

Copiar

`version: '3.8'  services:   postgres:     image: postgres     container_name: postgres     environment:       POSTGRES_USER: user       POSTGRES_PASSWORD: password       POSTGRES_DB: mydb     ports:       - "5432:5432"    adminer:     image: adminer     container_name: adminer     ports:       - "8080:8080"`

### **📌 Ejecutar los servicios**

```         
bash
```

Copiar

`docker-compose up -d`

### **📌 Verificar contenedores**

```         
bash
```

Copiar

`docker-compose ps`

Accede a **Adminer** en http://localhost:8080 para visualizar la base de datos.

### **📌 Detener y eliminar contenedores**

```         
bash
```

Copiar

`docker-compose down`

## **5. Introducción a Kubernetes (Minikube en Local)**

**Kubernetes** es una plataforma para **orquestar** múltiples contenedores en producción.\
Minikube permite ejecutarlo en local sin infraestructura cloud.

### **📌 Instalar Minikube en Linux**

```         
bash
```

Copiar

`curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube`

Verifica la instalación:

```         
bash
```

Copiar

`minikube version`

### **📌 Iniciar Minikube**

```         
bash
```

Copiar

`minikube start`

### **📌 Crear un Deployment en Kubernetes**

```         
bash
```

Copiar

`kubectl create deployment mi-app --image=nginx kubectl expose deployment mi-app --type=NodePort --port=80`

### **📌 Acceder a la Aplicación**

```         
bash
```

Copiar

`minikube service mi-app --url`

📌 **Explicación:**

-   `kubectl create deployment`: despliega una aplicación en Kubernetes.

-   `kubectl expose`: expone el servicio en un puerto.

-   `minikube service`: obtiene la URL para acceder.

## **6. Infraestructura Reproducible con Docker Compose Avanzado**

Podemos definir **pipelines completos** con **PostgreSQL, MinIO y Kafka** en un solo `docker-compose.yml`.

📌 **Ejemplo: Orquestar PostgreSQL, MinIO y Kafka**

```         
yaml
```

Copiar

`version: '3.8'  services:   postgres:     image: postgres     container_name: postgres     environment:       POSTGRES_USER: user       POSTGRES_PASSWORD: password       POSTGRES_DB: mydb     ports:       - "5432:5432"    minio:     image: minio/minio     container_name: minio     command: server /data --console-address ":9001"     environment:       MINIO_ROOT_USER: minioadmin       MINIO_ROOT_PASSWORD: minioadmin     ports:       - "9000:9000"       - "9001:9001"    kafka:     image: confluentinc/cp-kafka     container_name: kafka     environment:       KAFKA_BROKER_ID: 1       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"       KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092     depends_on:       - zookeeper     ports:       - "9092:9092"    zookeeper:     image: confluentinc/cp-zookeeper     container_name: zookeeper     environment:       ZOOKEEPER_CLIENT_PORT: 2181     ports:       - "2181:2181"`

### **📌 Levantar toda la infraestructura**

```         
bash
```

Copiar

`docker-compose up -d`

📌 **Explicación:**\
✅ PostgreSQL como base de datos.\
✅ MinIO como almacenamiento de objetos.\
✅ Kafka para procesamiento en tiempo real.

Ahora puedes acceder a:

-   **PostgreSQL** en `localhost:5432`

-   **MinIO** en `http://localhost:9001`

-   **Kafka** en `localhost:9092`

## **Conclusión**

✔️ **Docker** permite ejecutar contenedores de forma eficiente.\
✔️ **Docker Compose** facilita la gestión de múltiples servicios.\
✔️ **Kubernetes (Minikube)** permite probar despliegues en local.\
✔️ **Infraestructura reproducible** con `docker-compose.yml`.

💬 **¿Quieres profundizar en Kubernetes o seguimos con Kafka?** 🚀